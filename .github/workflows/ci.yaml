name: crud-ci

on:
  push:
    branches:
      - main
      - '!dependabot/**'
    tags:
      - '**'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

env:
  GO_VERSION: '1.24'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      
      - name: Go basic checks
        run: |
          # Check if code is properly formatted
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted:"
            gofmt -s -l .
            exit 1
          fi
          
          # Run go vet
          go vet ./...
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61.0
          args: --timeout=5m
        continue-on-error: true
        id: golangci
        
      - name: Fallback linting (if golangci-lint fails)
        if: steps.golangci.outcome == 'failure'
        run: |
          echo "golangci-lint failed, using fallback linting script"
          ./hack/lint.sh

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        env:
          DATABASE_URL: "host=localhost user=postgres password=postgres dbname=testdb port=5432 sslmode=disable"
        run: make test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./cover.out
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Build application
        run: make build
      
      - name: Verify binary
        run: |
          ls -la .bin/
          file .bin/crud
          echo "Binary created successfully"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run govulncheck
        uses: golang/govulncheck-action@v1

  # integration:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   services:
  #     postgres:
  #       image: postgres:16
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_USER: postgres
  #         POSTGRES_DB: testdb
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
    
  #   steps:
  #     - uses: actions/checkout@v5
      
  #     - uses: actions/setup-go@v6
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
      
  #     - name: Build application
  #       run: make build
      
  #     - name: Run integration tests
  #       env:
  #         DATABASE_URL: "host=localhost user=postgres password=postgres dbname=testdb port=5432 sslmode=disable"
  #         PORT: "8080"
  #         SECRET: "test-secret-for-integration-testing-only"
  #       run: |
  #         # Start application in background
  #         ./.bin/crud &
  #         APP_PID=$!
          
  #         # Run integration tests
  #         ./hack/integration-test.sh || TEST_RESULT=$?
          
  #         # Cleanup application
  #         kill $APP_PID || true
          
  #         # Exit with test result
  #         exit ${TEST_RESULT:-0}